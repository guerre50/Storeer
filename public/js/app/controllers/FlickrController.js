// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "marionette"], function($, _, Backbone) {
    var FlickrController, _ref;
    FlickrController = (function(_super) {
      __extends(FlickrController, _super);

      function FlickrController() {
        _ref = FlickrController.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      FlickrController.prototype.apiKey = '55ec26d53c16abec5dca3c72e76ece71';

      FlickrController.prototype.groupId = '46744914%40N00';

      FlickrController.prototype.initialize = function() {
        _.bindAll(this);
        return this.urls = {
          base: "http://api.flickr.com/services/rest/?api_key=" + this.apiKey + "&group_id=" + this.groupId + "&format=json&nojsoncallback=1",
          topics: "&method=flickr.groups.discuss.topics.getList",
          user: "&method=flickr.people.getInfo",
          replies: "&method=flickr.groups.discuss.replies.getList"
        };
      };

      FlickrController.prototype.topics = function(perPage, page, success, fail) {
        var url;
        if (perPage == null) {
          perPage = 20;
        }
        if (page == null) {
          page = 1;
        }
        if (success == null) {
          success = this.onSuccess;
        }
        if (fail == null) {
          fail = this.onFail;
        }
        url = this.urls.base + this.urls.topics + this.perPage(perPage) + this.page(page);
        return this.ajaxPetition(url, this.processTopic, success, fail);
      };

      FlickrController.prototype.user = function(userId, success, fail) {
        var url;
        url = this.urls.base + this.urls.user + this.userId(userId);
        return this.ajaxPetition(url, this.processUser, success, fail);
      };

      FlickrController.prototype.replies = function(topicId, perPage, page, success, fail) {
        var url;
        if (perPage == null) {
          perPage = 20;
        }
        if (page == null) {
          page = 1;
        }
        if (success == null) {
          success = this.onSuccess;
        }
        if (fail == null) {
          fail = this.onFail;
        }
        url = this.urls.base + this.urls.replies + this.perPage(perPage) + this.page(page) + this.topicId(topicId);
        return this.ajaxPetition(url, this.processReplies, success, fail);
      };

      FlickrController.prototype.onFail = function(msg) {
        return console.log("Flickr call failed:", msg);
      };

      FlickrController.prototype.onSuccess = function(msg) {
        return console.log("Flickr call success:", msg);
      };

      FlickrController.prototype.perPage = function(perPage) {
        return "&per_page=" + perPage;
      };

      FlickrController.prototype.page = function(page) {
        return "&page=" + page;
      };

      FlickrController.prototype.userId = function(userId) {
        return "&user_id=" + userId;
      };

      FlickrController.prototype.topicId = function(topicId) {
        return "&topic_id=" + topicId;
      };

      FlickrController.prototype.ajaxPetition = function(url, process, successCallback, failCallback) {
        return $.ajax({
          type: "GET",
          url: url,
          success: function(msg) {
            return successCallback(process(msg));
          },
          fail: function(msg) {
            return failCallback(msg);
          }
        });
      };

      FlickrController.prototype.processReplies = function(msg) {
        var buildAvatar, replies, result;
        replies = msg.replies.reply;
        result = [];
        buildAvatar = this.buildAvatarURL;
        _.each(replies, function(reply) {
          reply.avatar = buildAvatar(reply);
          return result.push(reply);
        });
        return result;
      };

      FlickrController.prototype.processUser = function(msg) {
        var user;
        user = msg.person;
        user.avatar = this.buildAvatarURL(user);
        return user;
      };

      FlickrController.prototype.buildAvatarURL = function(user) {
        var iconfarm, iconserver, nsid;
        iconserver = user.iconserver;
        if (iconserver > 0) {
          iconfarm = user.iconfarm;
          nsid = user.nsid ? user.nsid : user.author;
          return "http://farm" + iconfarm + ".staticflickr.com/" + iconserver + "/buddyicons/" + nsid + ".jpg";
        } else {
          return "http://www.flickr.com/images/buddyicon.gif";
        }
      };

      FlickrController.prototype.buildImgURL = function(url) {};

      FlickrController.prototype.processTopic = function(msg) {
        var buildAvatarURL, result, topics;
        topics = msg.topics.topic;
        result = [];
        buildAvatarURL = this.buildAvatarURL;
        _.each(topics, function(topic) {
          var content, error, i, imgs;
          try {
            content = $(topic.message._content);
            imgs = content.find('img');
            if (imgs.length === 5) {
              topic.frames = [];
              topic.thumbnails = [];
              i = 0;
              _.each(imgs, function(img) {
                var src, srcBase, startSize;
                src = img.src;
                startSize = src.lastIndexOf('_');
                if (src.charAt(startSize + 2) !== '.') {
                  startSize = src.lastIndexOf('.');
                }
                srcBase = src.substr(0, startSize);
                this.thumbnails.push({
                  src: srcBase + (i === 0 ? "_q.jpg" : "_s.jpg")
                });
                this.frames.push({
                  src: srcBase + ".jpg"
                });
                return i++;
              }, topic);
              topic.avatar = buildAvatarURL(topic);
              return this.push(topic);
            }
          } catch (_error) {
            error = _error;
          }
        }, result);
        return result;
      };

      return FlickrController;

    })(Backbone.Marionette.Controller);
    return new FlickrController();
  });

}).call(this);

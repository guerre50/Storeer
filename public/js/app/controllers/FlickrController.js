// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "App"], function($, _, Backbone, app) {
    var FlickrController, _ref;
    FlickrController = (function(_super) {
      __extends(FlickrController, _super);

      function FlickrController() {
        _ref = FlickrController.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      FlickrController.prototype.apiKey = 'INSERT YOUR API KEY HERE';

      FlickrController.prototype.groupId = '46744914%40N00';

      FlickrController.prototype.initialize = function(options) {
        _.bindAll(this);
        return this.urls = {
          base: "http://api.flickr.com/services/rest/?api_key=" + this.apiKey + "&group_id=" + this.groupId + "&format=json&nojsoncallback=1",
          topics: "&method=flickr.groups.discuss.topics.getList",
          user: "&method=flickr.people.getInfo"
        };
      };

      FlickrController.prototype.topics = function(perPage, page, success, fail) {
        var url;
        if (perPage == null) {
          perPage = 20;
        }
        if (page == null) {
          page = 1;
        }
        url = this.urls.base + this.urls.topics + this.perPage(perPage) + this.page(page);
        return this.ajaxPetition(url, this.processTopic, success, fail);
      };

      FlickrController.prototype.user = function(userId, success, fail) {
        var url;
        url = this.urls.base + this.urls.user + this.userId(userId);
        return this.ajaxPetition(url);
      };

      FlickrController.prototype.onSuccess = function(result) {
        return this.topics = result;
      };

      FlickrController.prototype.onFail = function(fail) {};

      FlickrController.prototype.perPage = function(perPage) {
        return "&per_page=" + perPage;
      };

      FlickrController.prototype.page = function(page) {
        return "&page=" + page;
      };

      FlickrController.prototype.userId = function(user_id) {
        return "&user_id=" + user_id;
      };

      FlickrController.prototype.ajaxPetition = function(url, process, successCallback, failCallback) {
        return $.ajax({
          type: "GET",
          url: url,
          success: function(msg) {
            return successCallback(process(msg));
          },
          fail: function(msg) {
            return failCallback(msg);
          }
        });
      };

      FlickrController.prototype.processTopic = function(msg) {
        var result, topics;
        topics = msg.topics.topic;
        result = [];
        _.each(topics, function(topic) {
          var content, error, imgs;
          try {
            content = $(topic.message._content);
            imgs = content.find('img');
            if (imgs.length === 5) {
              topic.frames = [];
              _.each(imgs, function(img) {
                return this.frames.push({
                  src: img.src
                });
              }, topic);
              return this.push(topic);
            }
          } catch (_error) {
            error = _error;
          }
        }, result);
        return result;
      };

      return FlickrController;

    })(Backbone.Marionette.Controller);
    return new FlickrController();
  });

}).call(this);

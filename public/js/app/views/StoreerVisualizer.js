// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "App", "text!templates/storeer-visualizer.html", "text!templates/comments.html", "models/StoreeModel"], function($, _, Backbone, app, template, commentsTemplate, StoreeModel) {
    var StoreerVisualizer, _ref;
    return StoreerVisualizer = (function(_super) {
      __extends(StoreerVisualizer, _super);

      function StoreerVisualizer() {
        _ref = StoreerVisualizer.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      StoreerVisualizer.prototype.template = _.template(template);

      StoreerVisualizer.prototype.strip = '#storeer-frame-strip';

      StoreerVisualizer.prototype.prevArrow = '#storeer-prev';

      StoreerVisualizer.prototype.nextArrow = '#storeer-next';

      StoreerVisualizer.prototype.imagesToLoad = 0;

      StoreerVisualizer.prototype.className = 'storeer-visualizer expanded';

      StoreerVisualizer.prototype.storeerOptions = '#storeer-options';

      StoreerVisualizer.prototype.storeerOptionsMobile = '#storeer-options-mobile';

      StoreerVisualizer.prototype.storeerOptionsContent = '#storeer-options-content';

      StoreerVisualizer.prototype.frameIndicator = '#frame-indicator';

      StoreerVisualizer.prototype.comments = '#storee-comments';

      StoreerVisualizer.prototype.commentsTemplate = _.template(commentsTemplate);

      StoreerVisualizer.prototype.initialize = function() {
        _.bindAll(this);
        $(window).on('keydown', this.onKeyDown);
        $(window).on('resize', this.timeoutResize);
        app.vent.on('load:images', this.loadImages);
        return app.vent.on('load:url', this.loadURL);
      };

      StoreerVisualizer.prototype.onShow = function() {
        return this.loadStoreer(this.model);
      };

      StoreerVisualizer.prototype.events = {
        'click .previous': 'previous',
        'click .next': 'next',
        'click .storeer-frame': 'onFrameClick',
        'click .storeer-frame-indicator': 'onFrameClick',
        'click .storeer-options': 'onClickOption',
        'transitionend #storeer-frame-strip': 'timeoutResize',
        'click .remove': 'onClickClose'
      };

      StoreerVisualizer.prototype.onDragOver = function(event) {
        return console.log(event);
      };

      StoreerVisualizer.prototype.loadStoreer = function(storee) {
        this.$el.find('img').off('load', this.onImgLoad);
        this.model = storee;
        this.model.loadExtras();
        this.listenTo(this.model, 'change:comments', this.renderComments);
        this.currentFrame = 0;
        this.imagesToLoad = 5;
        this.render();
        this.$el.find('img').on('load', this.onImgLoad);
        this.$strip = $(this.strip);
        this.$frames = this.$strip.find("div.item");
        this.$prevArrow = $(this.prevArrow);
        this.$nextArrow = $(this.nextArrow);
        this.$comments = $(this.comments);
        this.$frameIndicator = $(this.frameIndicator);
        this.$storeerOptions = $($(this.storeerOptions)[0]).children();
        this.$storeerOptionsMobile = $($(this.storeerOptionsMobile)[0]).children();
        this.$storeerOptionsContent = $($(this.storeerOptionsContent)[0]).children();
        this.setOptionsOrder();
        this.resize();
        if (!this.model.id) {
          app.vent.trigger('requireDrop');
        }
        return this;
      };

      StoreerVisualizer.prototype.setImage = function(frame, image) {
        var $frame, $img;
        $frame = $(this.$frames[frame]);
        this.model.attributes.frames[frame].src = image;
        $img = $($frame.find('img'));
        $img.attr('src', image);
        $img.removeClass('empty');
        $frame.find('div.storeer-frame-empty').remove();
        return this.next();
      };

      StoreerVisualizer.prototype.loadImages = function(images) {
        var frame, image, reader, setImage;
        setImage = this.setImage;
        image = images[0];
        frame = this.currentFrame;
        reader = new FileReader();
        reader.onload = (function(file) {
          return function(e) {
            return setImage(frame, e.target.result);
          };
        })(image);
        return reader.readAsDataURL(image);
      };

      StoreerVisualizer.prototype.loadURL = function(URL) {
        return console.log(URL);
      };

      StoreerVisualizer.prototype.setOptionsOrder = function() {
        var i, option, _i, _len, _ref1, _results;
        i = 0;
        _ref1 = this.$storeerOptions;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          option = _ref1[_i];
          $($(option)[0]).data('order', i);
          $(this.$storeerOptionsMobile[i]).data('order', i);
          _results.push(i++);
        }
        return _results;
      };

      StoreerVisualizer.prototype.previous = function() {
        return this.setCurrentFrame(this.currentFrame - 1);
      };

      StoreerVisualizer.prototype.next = function() {
        return this.setCurrentFrame(this.currentFrame + 1);
      };

      StoreerVisualizer.prototype.onLoad = function() {
        this.repositionStoree();
        return this.updateControlArrows();
      };

      StoreerVisualizer.prototype.onImgLoad = function(event) {
        var $img, img, tmpImage;
        img = event.target;
        $img = $(img);
        tmpImage = new Image();
        tmpImage.src = img.src;
        $img.data('ratio', tmpImage.width / tmpImage.height);
        this.resize($img.parent());
        if (!--this.imagesToLoad) {
          return this.onLoad();
        }
      };

      StoreerVisualizer.prototype.onFrameClick = function(event) {
        var order;
        order = $(event.currentTarget).data('order');
        this.setCurrentFrame(order);
        return false;
      };

      StoreerVisualizer.prototype.onKeyDown = function(event) {
        var code;
        if (!event || event.target.localName !== "body") {
          return;
        }
        code = event.keyCode;
        switch (code) {
          case 37:
            return this.previous();
          case 39:
            return this.next();
          case 27:
            return this.onClickClose();
        }
      };

      StoreerVisualizer.prototype.onClickOption = function(event) {
        var target, targetOption;
        console.log(this.$storeerOptions);
        this.$storeerOptions.filter('div.active').toggleClass('active');
        this.$storeerOptionsMobile.filter('div.active').toggleClass('active');
        this.$storeerOptionsContent.filter('div.active').toggleClass('active');
        target = $(event.currentTarget);
        targetOption = target.data('order');
        $(this.$storeerOptionsMobile[targetOption]).addClass('active');
        $(this.$storeerOptions[targetOption]).addClass('active');
        return $(this.$storeerOptionsContent[targetOption]).addClass('active');
      };

      StoreerVisualizer.prototype.onClickClose = function() {
        return app.vent.trigger('close:storee');
      };

      StoreerVisualizer.prototype.setCurrentFrame = function(frame) {
        var currentFrame, currentIndicator, previousFrame;
        if (frame >= 0 && frame < this.$frames.length) {
          previousFrame = this.getCurrentFrame();
          this.currentFrame = frame;
          currentFrame = this.getCurrentFrame();
          previousFrame.toggleClass('active');
          currentFrame.toggleClass('active');
          currentIndicator = this.$frameIndicator.find('.active');
          currentIndicator.toggleClass('active', false);
          $(this.$frameIndicator.children()[this.currentFrame]).toggleClass('active', true);
          this.repositionStoree();
          this.updateControlArrows();
        }
        return this;
      };

      StoreerVisualizer.prototype.getCurrentFrame = function() {
        return $(this.$frames[this.currentFrame]);
      };

      StoreerVisualizer.prototype.updateControlArrows = function() {
        var currentFrame;
        currentFrame = this.getCurrentFrame();
        if (this.$frames.first().data('order') === currentFrame.data('order')) {
          this.$prevArrow.css('left', -this.$prevArrow.width());
        } else {
          this.$prevArrow.css('left', '');
        }
        if (this.$frames.last().data('order') === currentFrame.data('order')) {
          if (this.model.id) {
            this.$el.toggleClass('expanded', false);
            this.resize();
          }
          return this.$nextArrow.css('right', -this.$nextArrow.width());
        } else {
          return this.$nextArrow.css('right', '');
        }
      };

      StoreerVisualizer.prototype.timeoutResize = function(event) {
        clearTimeout(this.resizeTimeout);
        return this.resizeTimeout = setTimeout(this.resize, 500);
      };

      StoreerVisualizer.prototype.resize = function() {
        _.each(this.$frames, this.resizeFrame);
        return this.repositionStoree();
      };

      StoreerVisualizer.prototype.resizeFrame = function(frame) {
        var $frame, $img, containerHeight, containerRatio, containerWidth, imgRatio, isLastFrame, newHeight;
        containerHeight = this.$strip.height();
        containerWidth = this.$el.width();
        containerRatio = containerWidth / containerHeight;
        isLastFrame = this.currentFrame === this.$frames.length - 1;
        $frame = $(frame);
        $img = $frame.find('img');
        imgRatio = $img.data('ratio');
        if (imgRatio) {
          if (imgRatio > containerRatio) {
            $frame.width(containerWidth);
            newHeight = containerWidth / imgRatio;
            $frame.height(newHeight);
            $frame.data('height', newHeight);
          } else {
            $frame.height(containerHeight);
            $frame.width(containerHeight * imgRatio);
            $frame.data('height', containerHeight);
          }
          return $frame.css('top', (containerHeight - $frame.data('height')) / 2);
        }
      };

      StoreerVisualizer.prototype.repositionStoree = function() {
        var currentFrame, currentWidth, frameLeftOffset, frameWidth;
        currentFrame = this.getCurrentFrame();
        currentWidth = this.$el.width();
        frameWidth = currentFrame.width();
        frameLeftOffset = currentFrame.position().left;
        this.$strip.css('left', (-frameLeftOffset + (currentWidth - frameWidth) / 2) + 'px');
        return this;
      };

      StoreerVisualizer.prototype.renderComments = function() {
        console.log("renderComments");
        this.$comments.html(this.commentsTemplate({
          model: this.model.toJSON()
        }));
        return this;
      };

      StoreerVisualizer.prototype.renderModel = function() {
        this.render();
        return this.resize();
      };

      StoreerVisualizer.prototype.render = function() {
        this.$el.html(this.template({
          model: this.model.toJSON()
        }));
        return this;
      };

      StoreerVisualizer.prototype.remove = function() {
        $(window).off('keydown', this.onKeyDown);
        $(window).off('resize', this.timeoutResize);
        return Backbone.View.prototype.remove.apply(this);
      };

      return StoreerVisualizer;

    })(Backbone.Marionette.ItemView);
  });

}).call(this);

/*
//@ sourceMappingURL=StoreerVisualizer.map
*/

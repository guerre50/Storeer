// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "App", "text!templates/storeer-visualizer.html", "text!templates/comments.html", "models/StoreeModel"], function($, _, Backbone, app, template, commentsTemplate, StoreeModel) {
    var StoreerVisualizer, _ref;
    return StoreerVisualizer = (function(_super) {
      __extends(StoreerVisualizer, _super);

      function StoreerVisualizer() {
        _ref = StoreerVisualizer.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      StoreerVisualizer.prototype.template = _.template(template);

      StoreerVisualizer.prototype.strip = '#storeer-frame-strip';

      StoreerVisualizer.prototype.prevArrow = '#storeer-prev';

      StoreerVisualizer.prototype.nextArrow = '#storeer-next';

      StoreerVisualizer.prototype.imagesToLoad = 0;

      StoreerVisualizer.prototype.className = 'storeer-visualizer';

      StoreerVisualizer.prototype.storeerOptions = '#storeer-options';

      StoreerVisualizer.prototype.storeerOptionsMobile = '#storeer-options-mobile';

      StoreerVisualizer.prototype.storeerOptionsContent = '#storeer-options-content';

      StoreerVisualizer.prototype.comments = '#storee-comments';

      StoreerVisualizer.prototype.commentsTemplate = _.template(commentsTemplate);

      StoreerVisualizer.prototype.initialize = function() {
        _.bindAll(this);
        $(window).on('keydown', this.onKeyDown);
        return $(window).on('resize', this.resize);
      };

      StoreerVisualizer.prototype.onShow = function() {
        return this.loadStoreer(this.model);
      };

      StoreerVisualizer.prototype.events = {
        'click .previous': 'previous',
        'click .next': 'next',
        'click .storeer-frame': 'onFrameClick',
        'click .storeer-options': 'onClickOption',
        'transitionend #storeer-frame-strip': 'onTransitionEnd',
        'click .remove': 'onClickClose'
      };

      StoreerVisualizer.prototype.loadStoreer = function(storee) {
        this.$el.find('img').off('load', this.onImgLoad);
        this.model = storee;
        this.model.loadExtras();
        this.listenTo(this.model, 'change:comments', this.renderComments);
        this.currentFrame = 0;
        this.imagesToLoad = 5;
        this.render();
        this.$el.find('img').on('load', this.onImgLoad);
        this.$strip = $(this.strip);
        this.$frames = this.$strip.find("div.item");
        this.$prevArrow = $(this.prevArrow);
        this.$nextArrow = $(this.nextArrow);
        this.$comments = $(this.comments);
        this.$storeerOptions = $($(this.storeerOptions)[0]).children();
        this.$storeerOptionsMobile = $($(this.storeerOptionsMobile)[0]).children();
        this.$storeerOptionsContent = $($(this.storeerOptionsContent)[0]).children();
        this.setOptionsOrder();
        return this;
      };

      StoreerVisualizer.prototype.setOptionsOrder = function() {
        var i, option, _i, _len, _ref1, _results;
        i = 0;
        _ref1 = this.$storeerOptions;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          option = _ref1[_i];
          $($(option)[0]).data('order', i);
          $(this.$storeerOptionsMobile[i]).data('order', i);
          _results.push(i++);
        }
        return _results;
      };

      StoreerVisualizer.prototype.previous = function() {
        return this.moveFrame(-1);
      };

      StoreerVisualizer.prototype.next = function() {
        return this.moveFrame(1);
      };

      StoreerVisualizer.prototype.onTransitionEnd = function(event) {
        return this.resize();
      };

      StoreerVisualizer.prototype.onLoad = function() {
        this.updateFrameOffsets();
        this.repositionStoree();
        return this.updateControlArrows();
      };

      StoreerVisualizer.prototype.onImgLoad = function(event) {
        var $img;
        $img = $(event.target);
        $img.css('margin-top', '0');
        $img.data('ratio', $img.width() / $img.height());
        if (!--this.imagesToLoad) {
          return this.onLoad();
        }
      };

      StoreerVisualizer.prototype.onFrameClick = function(event) {
        var order;
        event.preventDefault();
        event.returnValue = false;
        order = $(event.currentTarget).data('order');
        return this.moveFrame(order - this.currentFrame);
      };

      StoreerVisualizer.prototype.onKeyDown = function(event) {
        var code;
        if (!event || event.target.localName !== "body") {
          return;
        }
        code = event.keyCode;
        switch (code) {
          case 37:
            return this.previous();
          case 39:
            return this.next();
          case 27:
            return this.onClickClose();
        }
      };

      StoreerVisualizer.prototype.onClickOption = function(event) {
        var target, targetOption;
        this.$storeerOptions.filter('div.active').toggleClass('active');
        this.$storeerOptionsMobile.filter('div.active').toggleClass('active');
        this.$storeerOptionsContent.filter('div.active').toggleClass('active');
        target = $(event.currentTarget);
        targetOption = target.data('order');
        $(this.$storeerOptionsMobile[targetOption]).addClass('active');
        $(this.$storeerOptions[targetOption]).addClass('active');
        return $(this.$storeerOptionsContent[targetOption]).addClass('active');
      };

      StoreerVisualizer.prototype.onClickClose = function() {
        return app.vent.trigger('close:storee');
      };

      StoreerVisualizer.prototype.moveFrame = function(sign) {
        var currentFrame, movement, previousFrame;
        if (sign === 0) {
          return this;
        }
        movement = sign < 0 ? "prev" : "next";
        previousFrame = this.getCurrentFrame();
        currentFrame = previousFrame[movement]();
        if (currentFrame.length > 0) {
          previousFrame.toggleClass('active');
          currentFrame.toggleClass('active');
          this.currentFrame = currentFrame.data('order');
        }
        this.repositionStoree();
        return this.updateControlArrows();
      };

      StoreerVisualizer.prototype.getCurrentFrame = function() {
        return $(this.$frames[this.currentFrame]);
      };

      StoreerVisualizer.prototype.resize = function() {
        this.updateFrameOffsets();
        return this.repositionStoree();
      };

      StoreerVisualizer.prototype.updateControlArrows = function() {
        var currentFrame;
        currentFrame = this.getCurrentFrame();
        if (this.$frames.first().data('order') === currentFrame.data('order')) {
          this.$prevArrow.css('left', -this.$prevArrow.width());
        } else {
          this.$prevArrow.css('left', '');
        }
        if (this.$frames.last().data('order') === currentFrame.data('order')) {
          return this.$nextArrow.css('right', -this.$nextArrow.width());
        } else {
          return this.$nextArrow.css('right', '');
        }
      };

      StoreerVisualizer.prototype.updateFrameOffsets = function() {
        var $frame, frame, i, _i, _len, _ref1, _results;
        i = 0;
        _ref1 = this.$frames;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          frame = _ref1[_i];
          $frame = $(frame);
          $frame.data('left', i);
          _results.push(i += $frame.width());
        }
        return _results;
      };

      StoreerVisualizer.prototype.repositionStoree = function() {
        var currentFrame, currentWidth, frameLeftOffset, frameWidth;
        currentFrame = this.$frames.filter('div.active');
        currentWidth = this.$el.width();
        frameWidth = currentFrame.width();
        frameLeftOffset = currentFrame.data('left');
        _.each(this.$frames, function(frame) {
          var $frame, $image;
          $frame = $(frame);
          $image = $frame.find("img");
          return $image.width($image.height() * $image.data('ratio'));
        });
        this.$strip.css('left', (-frameLeftOffset + (currentWidth - frameWidth) / 2) + 'px');
        return this;
      };

      StoreerVisualizer.prototype.renderComments = function() {
        this.$comments.html(this.commentsTemplate({
          model: this.model.toJSON()
        }));
        return this;
      };

      StoreerVisualizer.prototype.render = function() {
        this.$el.html(this.template({
          model: this.model.toJSON()
        }));
        return this;
      };

      StoreerVisualizer.prototype.remove = function() {
        $(window).off('keydown', this.onKeyDown);
        $(window).off('resize', this.resize);
        return Backbone.View.prototype.remove.apply(this);
      };

      return StoreerVisualizer;

    })(Backbone.Marionette.ItemView);
  });

}).call(this);

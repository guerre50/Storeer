// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "App", "views/StoreerVisualizer", "views/StoreerLibrary", "views/LandingView", "views/HomeView", "models/StoreeModel", "text!templates/explorer.html"], function($, _, Backbone, app, StoreerVisualizer, StoreerLibrary, LandingView, HomeView, StoreeModel, template) {
    var ExplorerView, _ref;
    return ExplorerView = (function(_super) {
      __extends(ExplorerView, _super);

      function ExplorerView() {
        _ref = ExplorerView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ExplorerView.prototype.template = _.template(template);

      ExplorerView.prototype.className = 'storeer-content';

      ExplorerView.prototype.dragTab = '#drag-tab';

      ExplorerView.prototype.tabs = '#explorer-tabs';

      ExplorerView.prototype.regions = {
        dropPanel: "#drop-panel",
        storee: "#storeer-storee",
        library: "#storeer-library"
      };

      ExplorerView.prototype.events = {
        'drop': 'onDrop',
        'dragenter  .storeer-visualizer-drop': 'onDragEnter',
        'dragleave .storeer-visualizer-drop': 'onDragLeave',
        'dragover .storeer-visualizer-drop': 'onDragOver',
        'mousedown .explorer-tabs': 'onMouseDown',
        'click .explorer-tab': 'selectTab',
        'mouseup .explorer-tab': 'selectTab',
        'mouseenter .explorer-tab': 'onMouseEnter'
      };

      ExplorerView.prototype.initialize = function() {
        _.bindAll(this);
        app.vent.on('drag-start:storee', this.onDragStart);
        app.vent.on('drag-end:storee', this.onDragEnd);
        app.vent.on('close:storee', this.closeStoree);
        app.vent.on('open:storee', this.openStoree);
        return app.vent.on('create:storee', this.createStoree);
      };

      ExplorerView.prototype.closeStoree = function() {
        return this.storee.show(new HomeView());
      };

      ExplorerView.prototype.onShow = function() {
        this.storee.show(new HomeView());
        this.library.show(new StoreerLibrary({
          collection: app.storees
        }));
        this.$dropPanel = $(this.regions.dropPanel);
        this.$dragTab = $(this.dragTab);
        this.$tabs = $(this.tabs);
        return this.$body = $('body');
      };

      ExplorerView.prototype.onDrop = function(event) {
        var storee;
        storee = event.originalEvent.dataTransfer.getData("storee");
        if (storee) {
          return this.openStoree(new StoreeModel(JSON.parse(storee)));
        }
      };

      ExplorerView.prototype.openStoree = function(storee) {
        app.router.navigate('storees/' + storee.id);
        this.storee.show(new StoreerVisualizer({
          model: storee
        }));
        return this.show($(this.$tabs.children()[0]));
      };

      ExplorerView.prototype.createStoree = function() {
        this.storee.show(new StoreerVisualizer({
          model: new StoreeModel()
        }));
        this.library.close();
        return this.show($(this.$tabs.children()[0]));
      };

      ExplorerView.prototype.onDragEnter = function(event) {
        console.log(event);
        return this.$dropPanel.addClass('drag-over');
      };

      ExplorerView.prototype.onDragLeave = function(event) {
        return this.$dropPanel.removeClass('drag-over');
      };

      ExplorerView.prototype.onDragOver = function(event) {
        console.log(event);
        return event.preventDefault();
      };

      ExplorerView.prototype.onDragStart = function(event) {
        return this.$dropPanel.addClass('dragging');
      };

      ExplorerView.prototype.onDragEnd = function(event) {
        return this.$dropPanel.removeClass('dragging').removeClass('drag-over');
      };

      ExplorerView.prototype.onMouseDown = function(event) {
        this.dragging = true;
        $(window).on('mousemove', this.onMouseMove);
        return $(window).on('mouseup', this.onMouseUp);
      };

      ExplorerView.prototype.onMouseUp = function(event) {
        this.dragging = false;
        $(window).off('mousemove', this.onMouseMove);
        return $(window).off('mouseup', this.onMouseUp);
      };

      ExplorerView.prototype.onMouseMove = function(event) {
        var left, max, min;
        if (this.dragging) {
          left = event.clientX / this.$body.width() * 100;
          min = 100 - this.tabSize() * 1.5;
          max = 100 - this.tabSize() * 0.5;
          if (left < min) {
            left = min;
          } else if (left > max) {
            left = max;
          }
          return this.slideTab(left + this.tabSize() / 2);
        }
      };

      ExplorerView.prototype.selectTab = function(event) {
        return this.show($(event.currentTarget));
      };

      ExplorerView.prototype.onMouseEnter = function(event) {
        if (this.dragging) {
          return this.show($(event.currentTarget));
        }
      };

      ExplorerView.prototype.show = function(tab) {
        this.$tabs.find('.active').toggleClass('active', false);
        tab.toggleClass('active', true);
        return this.slideTab((tab.position().left) / this.$body.width() * 100 + this.tabSize());
      };

      ExplorerView.prototype.tabSize = function() {
        return (this.$dragTab.width() / this.$body.width()) * 100;
      };

      ExplorerView.prototype.slideTab = function(left) {
        var tabSize;
        tabSize = this.tabSize();
        this.$dragTab.css('right', ((100 - left) / 100 * this.$body.width()) + "px");
        if (left >= 95) {
          left = 0;
        } else {
          left = 100;
        }
        this.library.$el.css('left', left + "%");
        return this.storee.$el.parent().css('left', -(100 - left) + "%");
      };

      return ExplorerView;

    })(Backbone.Marionette.Layout);
  });

}).call(this);

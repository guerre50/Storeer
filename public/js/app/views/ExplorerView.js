// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "App", "views/StoreerVisualizer", "views/StoreerLibrary", "views/LandingView", "views/HomeView", "views/DropAreaView", "views/StreamView", "models/StoreeModel", "text!templates/explorer.html"], function($, _, Backbone, app, StoreerVisualizer, StoreerLibrary, LandingView, HomeView, DropAreaView, StreamView, StoreeModel, template) {
    var ExplorerView, _ref;
    return ExplorerView = (function(_super) {
      __extends(ExplorerView, _super);

      function ExplorerView() {
        _ref = ExplorerView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ExplorerView.prototype.template = _.template(template);

      ExplorerView.prototype.className = 'storeer-content';

      ExplorerView.prototype.tabs = '#explorer-tabs';

      ExplorerView.prototype.tabsMobile = '#explorer-tabs-mobile';

      ExplorerView.prototype.regions = {
        dropArea: "#drop-panel",
        storee: "#storeer-storee",
        library: "#storeer-library",
        overlay: "#storeer-overlay"
      };

      ExplorerView.prototype.events = {
        'click .explorer-tab': 'toggleSidePanel'
      };

      ExplorerView.prototype.initialize = function() {
        _.bindAll(this);
        app.vent.on('close:storee', this.closeStoree);
        app.vent.on('open:storee', this.openStoree);
        return app.vent.on('create:storee', this.createStoree);
      };

      ExplorerView.prototype.remove = function() {
        app.vent.off('close:storee', this.closeStoree);
        app.vent.off('open:storee', this.openStoree);
        return app.vent.off('create:storee', this.createStoree);
      };

      ExplorerView.prototype.onShow = function() {
        this.storee.show(new StreamView({
          collection: app.storees
        }));
        this.dropArea.show(new DropAreaView());
        this.library.show(new StoreerLibrary({
          collection: app.storees
        }));
        this.$dropArea = $(this.regions.dropArea);
        this.$dragTab = $(this.dragTab);
        this.$tabs = $(this.tabs);
        this.$tabsMobile = $(this.tabsMobile);
        this.$body = $('body');
        this.library.$el.parent().toggleClass('enabled', true);
        return this.$tabsMobile.parent().toggleClass('enabled', true);
      };

      ExplorerView.prototype.closeStoree = function() {
        if (this.overlay.$el.hasClass('enabled')) {
          this.overlay.close();
          return this.overlay.$el.toggleClass('enabled', false);
        } else {
          return this.storee.show(new StreamView({
            collection: app.storees
          }));
        }
      };

      ExplorerView.prototype.openStoree = function(storee) {
        app.router.navigate('storees/' + storee.id);
        if (this.storee) {
          this.overlay.show(new StoreerVisualizer({
            model: storee
          }));
          return this.overlay.$el.toggleClass('enabled', true);
        } else {
          return this.storee.show(new StoreerVisualizer({
            model: storee
          }));
        }
      };

      ExplorerView.prototype.createStoree = function() {
        this.storee.show(new StoreerVisualizer({
          model: new StoreeModel()
        }));
        return this.removeSidePanel();
      };

      ExplorerView.prototype.toggleSidePanel = function(value) {
        var sidePanel;
        if (value !== void 0 && value === this.isSidePanelOpen()) {
          return;
        }
        sidePanel = this.library.$el.parent();
        sidePanel.toggleClass('expanded');
        sidePanel.css('left', sidePanel.hasClass('expanded') ? '0%' : '100%');
        $(this.$tabs.children()[1]).toggleClass('active');
        return $(this.$tabsMobile.children()[1]).toggleClass('active');
      };

      ExplorerView.prototype.isSidePanelOpen = function() {
        return this.library.$el.parent().hasClass('expanded');
      };

      ExplorerView.prototype.removeSidePanel = function() {
        this.library.close();
        this.library.$el.parent().toggleClass('enabled', false);
        return this.$tabsMobile.parent().toggleClass('enabled', false);
      };

      return ExplorerView;

    })(Backbone.Marionette.Layout);
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "marionette", "App", "text!templates/landing.html"], function($, _, Backbone, Marionette, app, template) {
    var LandingView, _ref;
    return LandingView = (function(_super) {
      __extends(LandingView, _super);

      function LandingView() {
        _ref = LandingView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      LandingView.prototype.template = _.template(template);

      LandingView.prototype.className = 'landing-container';

      LandingView.prototype.landingStoree = '#landing-storee';

      LandingView.prototype.landingTexts = '#landing-text';

      LandingView.prototype.initialize = function() {
        return _.bindAll(this);
      };

      LandingView.prototype.onShow = function() {
        this.$landingStoree = $(this.landingStoree);
        this.$landingTexts = $(this.landingTexts);
        return this.setInterval();
      };

      LandingView.prototype.events = {
        'click .landing-storee': 'onLandingStoreeClick',
        'click .landing-button': 'onLandingButtonClick',
        'click .previous': 'previous',
        'click .next': 'next'
      };

      LandingView.prototype.onLandingStoreeClick = function(event) {
        this.selectStoree($(event.currentTarget));
        return this.clearInterval();
      };

      LandingView.prototype.selectStoree = function(storee) {
        var newActive, oldActive;
        oldActive = this.$landingStoree.find('.active');
        oldActive.toggleClass('active');
        $(oldActive.data('text')).toggleClass('active');
        newActive = storee;
        newActive.toggleClass('active');
        return $(newActive.data('text')).toggleClass('active');
      };

      LandingView.prototype.next = function() {
        this.clearInterval();
        return this.animateStoree('next');
      };

      LandingView.prototype.previous = function() {
        this.clearInterval();
        return this.animateStoree('prev');
      };

      LandingView.prototype.animateStoree = function(movement) {
        var currentActive, newActive;
        currentActive = this.$landingStoree.find('.active');
        newActive = currentActive[movement]();
        if (newActive.length > 0) {
          return this.selectStoree(newActive);
        } else {
          return this.clearInterval();
        }
      };

      LandingView.prototype.setInterval = function() {
        var animateStoree;
        animateStoree = this.animateStoree;
        return this.storeeInterval = setInterval(function() {
          return animateStoree('next');
        }, 2500);
      };

      LandingView.prototype.clearInterval = function() {
        return clearInterval(this.storeeInterval);
      };

      LandingView.prototype.remove = function() {
        return this.clearInterval();
      };

      LandingView.prototype.onLandingButtonClick = function(event) {
        return app.router.navigate('home', {
          trigger: true
        });
      };

      return LandingView;

    })(Backbone.Marionette.ItemView);
  });

}).call(this);

/*
//@ sourceMappingURL=LandingView.map
*/

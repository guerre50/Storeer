// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "App", "text!templates/storee-strip.html"], function($, _, Backbone, app, template) {
    var StoreeStripView, _ref;
    return StoreeStripView = (function(_super) {
      __extends(StoreeStripView, _super);

      function StoreeStripView() {
        _ref = StoreeStripView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      StoreeStripView.prototype.template = _.template(template);

      StoreeStripView.prototype.className = 'storeer-visualizer expanded';

      StoreeStripView.prototype.ui = {
        frames: '#storeer-frame-strip .item',
        strip: '#storeer-frame-strip',
        prevArrow: '#storeer-prev',
        nextArrow: '#storeer-next',
        storeerVisualizer: '#storeer-visualizer',
        frameIndicator: '#frame-indicator'
      };

      StoreeStripView.prototype.events = {
        'click .previous': 'previous',
        'click .next': 'next',
        'click .storeer-frame': 'onFrameClick',
        'click .storeer-frame-indicator': 'onFrameClick',
        'click .storeer-options': 'onClickOption',
        'click .expand': 'expand',
        'transitionend #storeer-frame-strip': 'timeoutResize',
        'mouseenter .storeer-visualizer': 'onMouseEnter',
        'mouseleave .storeer-visualizer': 'onMouseLeave'
      };

      StoreeStripView.prototype.visibility = false;

      StoreeStripView.prototype.currentFrame = 0;

      StoreeStripView.prototype.imagesToLoad = 0;

      StoreeStripView.prototype.visibleFrames = 2;

      StoreeStripView.prototype.initialize = function() {
        _.bindAll(this);
        this.loadStoreer(this.model);
        this.on('visible', this.onVisible);
        return app.vent.on('resize', this.timeoutResize);
      };

      StoreeStripView.prototype.remove = function() {
        clearTimeout(this.startTimeout);
        clearTimeout(this.resizeTimeout);
        clearTimeout(this.loadImagesTimeout);
        this.$el.find('img').off('load', this.onImgLoad);
        return Backbone.View.prototype.remove.apply(this);
      };

      StoreeStripView.prototype.onShow = function() {
        this.loadStoreer(this.model);
        this.updateControlArrows();
        return this.onVisible(true);
      };

      StoreeStripView.prototype.onMouseEnter = function() {
        this.loadImagesTimeout = setTimeout(this.renderExtraImages, 500);
        return this.startTimeout = setTimeout(this.start, 2000);
      };

      StoreeStripView.prototype.start = function() {
        return this.$el.toggleClass('started', true);
      };

      StoreeStripView.prototype.onMouseLeave = function() {
        clearTimeout(this.loadImages);
        clearTimeout(this.startTimeout);
        return this.$el.toggleClass('started', false);
      };

      StoreeStripView.prototype.expand = function() {
        return app.vent.trigger('open:storee', this.model);
      };

      StoreeStripView.prototype.onVisible = function(visibility) {
        if (visibility) {
          this.visibility = visibility;
          this.$el.toggleClass('visible', visibility);
          return this.repositionStoree();
        }
      };

      StoreeStripView.prototype.loadStoreer = function(storee) {
        $ = this.$;
        this.model = storee;
        this.currentFrame = 0;
        this.imagesToLoad = this.visibleFrames;
        return this;
      };

      StoreeStripView.prototype.previous = function() {
        return this.setCurrentFrame(this.currentFrame - 1);
      };

      StoreeStripView.prototype.next = function() {
        return this.setCurrentFrame(this.currentFrame + 1);
      };

      StoreeStripView.prototype.onImgLoad = function(event) {
        var $img, frame, img, tmpImage;
        img = event.target;
        $img = this.$(img);
        tmpImage = new Image();
        tmpImage.src = img.src;
        img.setAttribute('data-ratio', tmpImage.width / tmpImage.height);
        $img.toggleClass('loading', false);
        frame = $img.parent();
        return this.repositionStoree();
      };

      StoreeStripView.prototype.onFrameClick = function(event) {
        var order;
        order = $(event.currentTarget).data('order');
        this.setCurrentFrame(order);
        return false;
      };

      StoreeStripView.prototype.setCurrentFrame = function(frame) {
        var currentFrame, previousFrame;
        if (frame >= 0 && frame < this.ui.frames.length) {
          previousFrame = this.getCurrentFrame().toggleClass('active');
          $(this.ui.frames[frame]).toggleClass('active');
          currentFrame = this.getCurrentFrame();
          this.ui.frameIndicator.find('.active').toggleClass('active', false);
          $(this.ui.frameIndicator.children()[this.currentFrame]).toggleClass('active', true);
          this.repositionStoree();
          this.updateControlArrows();
        }
        return this;
      };

      StoreeStripView.prototype.getCurrentFrame = function() {
        $ = this.$;
        this.currentFrame = parseInt(this.ui.frames.filter('.active').attr('data-order'));
        return $(this.ui.frames[this.currentFrame]);
      };

      StoreeStripView.prototype.updateControlArrows = function() {
        var currentFrame;
        currentFrame = this.getCurrentFrame();
        if (this.ui.frames.first().data('order') === currentFrame.data('order')) {
          this.ui.prevArrow.css('left', -this.ui.prevArrow.width());
        } else {
          this.ui.prevArrow.css('left', '');
        }
        if (this.ui.frames.last().data('order') === currentFrame.data('order')) {
          this.$el.toggleClass('started', false);
          return this.ui.nextArrow.css('right', -this.ui.nextArrow.width());
        } else {
          return this.ui.nextArrow.css('right', '');
        }
      };

      StoreeStripView.prototype.timeoutResize = function(event) {
        clearTimeout(this.resizeTimeout);
        return this.resizeTimeout = setTimeout(this.resize, 200);
      };

      StoreeStripView.prototype.resize = function() {
        _.each(this.ui.frames, this.resizeFrame);
        return this.repositionStoree();
      };

      StoreeStripView.prototype.resizeFrame = function(frame) {
        var $frame, $img, containerHeight, containerRatio, containerWidth, imgRatio, newHeight;
        containerHeight = this.ui.strip.height();
        containerWidth = this.$el.width();
        containerRatio = containerWidth / containerHeight;
        $frame = $(frame);
        $img = $frame.find('img');
        imgRatio = $img.data('ratio');
        if (imgRatio) {
          if (imgRatio > containerRatio) {
            $frame.width(containerWidth);
            newHeight = containerWidth / imgRatio;
            $frame.height(newHeight);
            $frame.data('height', newHeight);
          } else {
            $frame.height(containerHeight);
            $frame.width(containerHeight * imgRatio);
            $frame.data('height', containerHeight);
          }
          return $frame.css('top', (containerHeight - $frame.data('height')) / 2);
        }
      };

      StoreeStripView.prototype.repositionStoree = function() {
        var currentFrame, currentWidth, frameLeftOffset, frameWidth;
        $ = this.$;
        currentFrame = this.getCurrentFrame();
        currentWidth = this.ui.storeerVisualizer.width();
        frameWidth = currentFrame.width();
        frameLeftOffset = currentFrame.position().left;
        this.ui.strip.css('left', (-frameLeftOffset + (currentWidth - frameWidth) / 2) + 'px');
        return this;
      };

      StoreeStripView.prototype.renderExtraImages = function() {
        var frames, i, image, images, _results;
        images = this.ui.frames.find('img');
        frames = this.model.get('frames');
        this.restartImageListeners();
        i = 0;
        _results = [];
        while (i < frames.length) {
          image = images[i];
          if (!image.src) {
            image.src = frames[i].src;
          }
          _results.push(i++);
        }
        return _results;
      };

      StoreeStripView.prototype.restartImageListeners = function() {
        return this.$el.find('img').off('load', this.onImgLoad).on('load', this.onImgLoad);
      };

      StoreeStripView.prototype.render = function() {
        this.$el.html(this.template({
          model: this.model.toJSON(),
          visible: this.visibility,
          visibleFrames: this.visibleFrames
        }));
        this.restartImageListeners();
        this.bindUIElements();
        return this;
      };

      return StoreeStripView;

    })(Backbone.Marionette.ItemView);
  });

}).call(this);

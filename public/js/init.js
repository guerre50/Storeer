// Generated by CoffeeScript 1.6.3
(function() {
  (function(ua, w, d) {
    var boilerplateMVC, filesToLoad, production;
    production = false;
    filesToLoad;
    boilerplateMVC = {
      loadCSS: function(url, callback) {
        var link;
        link = d.createElement('link');
        link.type = 'text/css';
        link.rel = 'stylesheet';
        link.href = url;
        d.getElementsByTagName('head')[0].appendChild(link);
        if (callback) {
          callback();
        }
      },
      loadJS: function(file, callback) {
        var script;
        script = d.createElement("script");
        script.type = 'text/javascript';
        if (script.readyState) {
          script.onreadystatechange = function() {
            if (script.readyState === "loaded" || script.readyState === "complete") {
              script.onreadystatechange = null;
              if (callback) {
                callback();
              }
            }
          };
        } else {
          script.onload = function() {
            return typeof callback === "function" ? callback() : void 0;
          };
        }
        if ((typeof file).toLowerCase() === 'object' && (file["data-main"] != null)) {
          script.setAttribute("data-main", file["data-main"]);
          script.async = true;
          script.src = file.src;
        } else {
          script.src = file;
        }
        return d.getElementsByTagName('head')[0].appendChild(script);
      },
      loadFiles: function(production, obj, callback) {
        var self;
        self = this;
        if (production) {
          return this.loadCSS(obj['prod-css'], function() {
            if (obj['prod-js']) {
              return self.loadJS(obj['prod-js'], callback);
            }
          });
        } else {
          return this.loadCSS(obj['dev-css'], function() {
            if (obj['dev-js']) {
              return self.loadJS(obj['dev-js'], callback);
            }
          });
        }
      }
    };
    if (/iPhone|iPod|iPad|Android|BlackBerry|Opera Mini|IEMobile/.test(ua)) {
      filesToLoad = {
        "dev-css": "css/mobile.css",
        "prod-css": "css/mobile.min.css",
        "dev-js": {
          "data-main": "js/app/config/config.js",
          "src": "js/libs/require.js"
        },
        "dev-init": "js/app/init/MobileInit.js",
        "prod-js": "js/app/init/MobileInit.min.js"
      };
    } else {
      filesToLoad = {
        "dev-css": "",
        "prod-css": "css/desktop.min.css",
        "dev-js": {
          "data-main": "js/app/config/config.js",
          "src": "js/libs/require.js"
        },
        "dev-init": "js/app/init/DesktopInit.js",
        "prod-js": "js/app/init/DesktopInit.min.js"
      };
    }
    boilerplateMVC.loadFiles(production, filesToLoad, function() {
      if (!production && window.require) {
        return require([filesToLoad['dev-init']]);
      }
    });
  })(navigator.userAgent || navigator.vendor || window.opera, window, document);

}).call(this);
